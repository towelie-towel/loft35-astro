---
interface Images {
  name: string;
  src: string;
}
export interface Props {
  images: Images[];
}
const { images } = Astro.props;
---

<div
  class="w-[95%] flex flex-col m-auto rounded-t-lg bg-[var(--secondary-bg-color)] shadow-lg"
>
  <div class="relative overflow-hidden">
    <button class="absolute -left-2 bottom-[40%] z-10" id="prev-card-btn">
      <!--  <PrevSlider stroke="#a1a5b7" /> -->
      <svg
        width={32}
        height={32}
        fill="none"
        viewBox="0 0 24 24"
        stroke={"currentColor"}
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width={2.5}
          d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    <button class="absolute -right-2 bottom-[40%] z-10" id="next-card-btn">
      <!-- <NextSlider stroke="#a1a5b7" /> -->
      <svg
        width={32}
        height={32}
        fill="none"
        viewBox="0 0 24 24"
        stroke={"currentColor"}
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width={2.5}
          d="M9 5l7 7-7 7"></path>
      </svg>
    </button>
    <div
      id="h-scroll"
      class="relative overflow-hidden flex w-full duration-300"
    >
      {
        images.map((image) => {
          return (
            <div class="flex-shrink-0 w-full">
              <div
                data-value={image.src}
                class="relative w-[90%] shadow-md my-3 mx-auto rounded-md flex justify-center items-center onload-card-image-replace"
              >
                <div class="w-full inset-0 bg-gradient-to-br from-[var(--secondary-bg-color)] to-[var(--primary-bg-color)] pt-[32%] animate-pulse" />
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
  <button
    class="max-w-[80%] opacity-[var(--dark-reduced-opacitity-1)] my-5 mx-auto rounded-md bg-[var(--light-gray-1)] p-2 text-[0.8rem] font-medium text-[var(--font-secondary-color)] shadow-md"
  >
    Click aquí para stalkear nuestro Instagram ;)
  </button>
</div>
<script>
  const cardSliderScroll = document.getElementById(
    "h-scroll"
  ) as HTMLDivElement;

  const nextCardSliderBtn = document.getElementById(
    "next-card-btn"
  ) as HTMLButtonElement;
  const prevCardSliderBtn = document.getElementById(
    "prev-card-btn"
  ) as HTMLButtonElement;
  const imagesContainers = document.querySelectorAll(
    ".onload-card-image-replace"
  );

  let imagesLoad: {
    isAnimating: boolean;
    imagesLoaded: string[];
  } = {
    isAnimating: false,
    imagesLoaded: [],
  };

  const cardsCount = cardSliderScroll.childElementCount - 1;
  let currentCard = 0;
  let timeOutSet = false;

  imagesContainers.forEach((imgContainer) => {
    const image = new Image();

    // asignando a la imágen el atributo "data-value" del imgContainer
    image.src = imgContainer.getAttribute("data-value") || "/placeholder.png";

    // al cargar la imágen:
    image.onload = () => {
      imgContainer.replaceChildren(image);
      imagesLoad.imagesLoaded.push(image.src);

      // si se cargaron las 4 imágenes se puede comenzar la animación
      if (
        imagesLoad.imagesLoaded.length === imagesContainers.length &&
        !imagesLoad.isAnimating
      ) {
        imagesLoad.isAnimating = true;
      }
    };
  });

  let startSliderX: number;
  let currentMaxSliderX: number;
  let currentMinSliderX: number;

  cardSliderScroll.addEventListener(
    "scroll",
    function (e) {
      e.preventDefault();
      e.stopPropagation();
    },
    { passive: false, once: true, capture: true }
  );

  cardSliderScroll.addEventListener(
    "touchstart",
    (e) => {
      startSliderX = e.touches[0].clientX;
      currentMaxSliderX = e.touches[0].clientX;
      currentMinSliderX = e.touches[0].clientX;
    },
    {
      passive: true,
    }
  );

  cardSliderScroll.addEventListener(
    "touchmove",
    (e) => {
      if (currentMaxSliderX < e.touches[0].clientX) {
        currentMaxSliderX = e.touches[0].clientX;
      }
      if (currentMinSliderX > e.touches[0].clientX) {
        currentMinSliderX = e.touches[0].clientX;
      }
    },
    {
      passive: true,
    }
  );

  cardSliderScroll.addEventListener("touchend", (e) => {
    const endSliderX = e.changedTouches[0].clientX;

    if (endSliderX > currentMinSliderX && endSliderX > startSliderX) {
      if (currentCard === 0) return;
      scrollToPrevCard();
    } else if (endSliderX < currentMaxSliderX && endSliderX < startSliderX) {
      if (currentCard === cardsCount) return;
      scrollToNextCard();
    }
  });

  nextCardSliderBtn.addEventListener("click", scrollToNextCard);
  prevCardSliderBtn.addEventListener("click", scrollToPrevCard);

  setInterval(() => {
    // verifica si cargó la imágen actúal en pantalla y la siguiente ya cargaron:
    let animateCurrent =
      imagesLoad.imagesLoaded.includes(
        imagesContainers[currentCard].getAttribute("data-value") || ""
      ) &&
      imagesLoad.imagesLoaded.includes(
        imagesContainers[currentCard + 1].getAttribute("data-value") || ""
      );

    if (!timeOutSet && imagesLoad.isAnimating && animateCurrent) {
      currentCard++;
      if (currentCard > cardsCount) {
        currentCard = 0;
      }
      cardSliderScroll.scrollTo({
        left: cardSliderScroll.offsetWidth * currentCard,
        behavior: "smooth",
      });
    }
  }, 10000);

  function scrollToNextCard() {
    if (!timeOutSet) {
      setTimeout(() => {
        timeOutSet = false;
      }, 8000);
      timeOutSet = true;
    }

    currentCard++;
    if (currentCard > cardsCount) {
      currentCard = 0;
    }
    cardSliderScroll.scrollTo({
      left: cardSliderScroll.offsetWidth * currentCard,
      behavior: "smooth",
    });
  }
  function scrollToPrevCard() {
    if (!timeOutSet) {
      setTimeout(() => {
        timeOutSet = false;
      }, 8000);
      timeOutSet = true;
    }

    currentCard--;
    if (currentCard < 0) {
      currentCard = cardsCount;
    }
    cardSliderScroll.scrollTo({
      left: cardSliderScroll.offsetWidth * currentCard,
      behavior: "smooth",
    });
  }
</script>
